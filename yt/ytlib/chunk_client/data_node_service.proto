package NYT.NChunkClient.NProto;

import "yt/core/misc/guid.proto";
import "yt/core/misc/error.proto";
import "yt/ytlib/node_tracker_client/node.proto";
import "yt/ytlib/chunk_client/chunk.proto";
import "yt/ytlib/chunk_client/chunk_spec.proto";

////////////////////////////////////////////////////////////////////////////////

message TReqStartChunk
{
    required NYT.NProto.TGuid chunk_id = 1;
    required int32 session_type = 2;
    optional bool sync_on_close = 3 [default = true];
}

message TRspStartChunk
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqFinishChunk
{
    required NYT.NProto.TGuid chunk_id = 1;
    required TChunkMeta chunk_meta = 2;

    // Used to ensure that we received exactly the same amount of blocks that we sent.
    required int32 block_count = 3;
}

message TRspFinishChunk
{
    required TChunkInfo chunk_info = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqPutBlocks
{
    required NYT.NProto.TGuid chunk_id = 1;
    required int32 start_block_index = 2;
    optional bool enable_caching = 5 [default = false];
}

message TRspPutBlocks
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqSendBlocks
{
    required NYT.NProto.TGuid chunk_id = 1;
    required NYT.NNodeTrackerClient.NProto.TNodeDescriptor target = 2;
    required int32 start_block_index = 3;
    required int32 block_count = 4;
}

message TRspSendBlocks
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqFlushBlock
  {
    required NYT.NProto.TGuid chunk_id = 1;
    required int32 block_index = 2;
}

message TRspFlushBlock
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqGetBlocks
{
    required NYT.NProto.TGuid chunk_id = 1;
    repeated int32 block_indexes = 2;
    optional NYT.NNodeTrackerClient.NProto.TNodeDescriptor peer_descriptor = 3;
    optional uint64 peer_expiration_time = 4;
    optional bool enable_caching = 5 [default = true];
    required int32 session_type = 6;
}

message TRspGetBlocks
{
    message TBlockInfo
    {
        required bool data_attached = 1;
        repeated NYT.NNodeTrackerClient.NProto.TNodeDescriptor p2p_descriptors = 2;
    }

    repeated TBlockInfo blocks = 1;
    required bool has_complete_chunk = 2;
}

////////////////////////////////////////////////////////////////////////////////

message TReqPingSession
{
    required NYT.NProto.TGuid chunk_id = 1;
}

message TRspPingSession
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqGetChunkMeta
{
    required NYT.NProto.TGuid chunk_id = 1;
    repeated int32 extension_tags = 2;
    // If true, then extension_tags are ignored and
    // the whole available meta is returned.
    optional bool all_extension_tags = 3 [default = false];
    optional int32 partition_tag = 4;
}

message TRspGetChunkMeta
{
    required TChunkMeta chunk_meta = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqPrecacheChunk
{
    required NYT.NProto.TGuid chunk_id = 1;
}

message TRspPrecacheChunk
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqUpdatePeer
{
    message TBlockId
    {
        required NYT.NProto.TGuid chunk_id = 1;
        required int32 block_index = 2;
    }

    repeated TBlockId block_ids = 1;
    required NYT.NNodeTrackerClient.NProto.TNodeDescriptor peer_descriptor = 2;
    required uint64 peer_expiration_time = 3;
}

////////////////////////////////////////////////////////////////////////////////

message TReqGetTableSamples
{
    message TSampleRequest
    {
        required NYT.NProto.TGuid chunk_id = 1;
        required int32 sample_count = 2;
    }

    repeated TSampleRequest sample_requests = 1;
    repeated string key_columns = 2;
}

message TRspGetTableSamples
{
    message TChunkSamples
    {
        optional NYT.NProto.TError error = 1;
        repeated NChunkClient.NProto.TKey items = 2;
    }

    repeated TChunkSamples samples = 1;
}

////////////////////////////////////////////////////////////////////////////////

// For sorted chunks only.
// Scheduler calls this method to perform sorted merge.
message TReqGetChunkSplits
{
    repeated NChunkClient.NProto.TChunkSpec chunk_specs = 1;
    repeated string key_columns = 2;
    required int64 min_split_size = 3;
}

message TRspGetChunkSplits
{
    message TChunkSplits
    {
        optional NYT.NProto.TError error = 1;
        repeated NChunkClient.NProto.TChunkSpec chunk_specs = 2;
    }

    repeated TChunkSplits splitted_chunks = 1;
}

////////////////////////////////////////////////////////////////////////////////
