package NYT.NTableClient.NProto;

////////////////////////////////////////////////////////////////////////////////

message TRange
{
    required bytes begin = 1;
    required bytes end = 2;
    required bool is_infinite = 3;
}

message TChannel 
{
    repeated bytes columns = 1;
    repeated TRange ranges = 2;
}

message TKeyPart
{
    // EKeyPartType
    required int32 type = 1;
    optional bytes str_value = 2;
    optional int64 int_value = 3;
    optional double double_value = 4;
}

message TKey
{
    repeated TKeyPart parts = 1;
}

message TSamplePart
{
    required bytes column = 1;
    required TKeyPart key_part = 2;
}

message TSample
{
    repeated TSamplePart parts = 1;
    // Number of rows from the last sample (inclusive) to this one (exclusive).
    required int64 row_count_since_previous = 2;
    // Similar to |row_count_since_previous| but measures approximate data size.
    required int64 data_size_since_previous = 3;
}

message TSamplesExt
{
    repeated TSample items = 1;
}

message TIndexRow
{
    required TKey key = 1;
    required int64 row_index = 2;
}

// Chunk meta extension.
message TIndexExt
{
    repeated TIndexRow items = 2;
}

// Chunk meta extension.
message TKeyColumnsExt
{
    repeated bytes values = 1;
}

// Chunk meta extension.
message TBoundaryKeysExt
{
    required TKey left = 1;
    required TKey right = 2;
}

message TBlockInfo
{
    required int32 block_index = 1;
    required int32 row_count = 2;
    optional int32 partition_tag = 3 [default = -1];
}

message TChunkChannel
{
    required TChannel channel = 1;
    repeated TBlockInfo blocks = 2;
}

// Chunk meta extension.
message TChannelsExt
{
    repeated TChunkChannel items = 1;
}

message TKeySample
{
    required NYT.NTableClient.NProto.TKey key = 1;
    // Number of rows from the last sample (inclusive) to this one (exclusive).
    required int64 row_count_since_previous = 2;
    // Similar to |row_count_since_previous| but measures approximate data size.
    required int64 data_size_since_previous = 3;
}

message TPartitionsExt
{
    repeated int64 sizes = 1;
}

////////////////////////////////////////////////////////////////////////////////

