package NYT.NScheduler.NProto;

import "yt/ytlib/chunk_holder/chunk.proto";
import "yt/ytlib/table_client/table_reader.proto";
import "yt/ytlib/table_client/table_chunk_meta.proto";
import "yt/ytlib/file_server/file_ypath.proto";
import "yt/ytlib/misc/error.proto";
import "yt/ytlib/misc/guid.proto";

////////////////////////////////////////////////////////////////////////////////

// Sent from the scheduler to an exec node.
// Describes a portion of processing for a job.
message TJobSpec
{
    required int32 type = 1;
    required bytes io_config = 2;

    extensions 100 to max;
}

// Typically sent from a job proxy to its supervisor
// (but is also passed on to other parts of the system).
// Describes the outcome of the job, in particular if it has finished successfully.
message TJobResult
{
    required NYT.NProto.TError error = 1;

    // List of chunks the job was unable to read.
    repeated NYT.NProto.TGuid failed_chunk_ids = 2;

    extensions 100 to max;
}

// Describes a part of input table(s) to be processed by a job.
message TTableInputSpec
{
    // Chunks comprising the input.
    repeated NYT.NTableClient.NProto.TInputChunk chunks = 1;
}

// Defines how to store output from a job into a table.
message TTableOutputSpec
{
    // YSON-serialized channels that must be used for writing the table.
    required bytes channels = 1;
    // The chunk list where output chunks must be placed.
    required NYT.NProto.TGuid chunk_list_id = 2;
}

// Defines how to store stderr from a job.
message TStdErrSpec
{
    // The transaction for uploading stderr chunks.
    required NYT.NProto.TGuid transaction_id = 1;
    // The chunk list where stderr chunks must be placed.
    required NYT.NProto.TGuid chunk_list_id = 2;
}

message TUserJobSpec
{
    extend TJobSpec
    {
        optional TUserJobSpec user_job_spec = 100;
    }

    // Additional files to be placed into the sandbox.
    repeated NYT.NFileServer.NProto.TRspFetch files = 1;

    // The user command to be executed.
    required string shell_command = 2;
}

////////////////////////////////////////////////////////////////////////////////

// Map jobs.
/*
 * Conceptually map is the simplest operation.
 * Input consists of a number of tables (or parts thereof).
 * These tables are merged together into a sequence of rows,
 * sequence is split into fragments and these fragments
 * are fed to jobs. Each job runs a given shell command.
 * The outputs of jobs are collected thus forming a number
 * of output tables.
 */
message TMapJobSpec
{
    extend TJobSpec
    {
        optional TMapJobSpec map_job_spec = 101;
    }

    // Portions of input data to be processed.
    required TTableInputSpec input_spec = 1;

    // Describes how to store job output.
    repeated TTableOutputSpec output_specs = 3;

    // The transaction used for writing output chunks.
    required NYT.NProto.TGuid output_transaction_id = 4;

    // Describes how to store job stderr.
    optional TStdErrSpec std_err_spec = 5;
}

////////////////////////////////////////////////////////////////////////////////

// Merge jobs.
/*
 * A merge job takes a number of chunks sequences (each containing sorted data)
 * and merges them. The result is split into chunks again.
 */
message TMergeJobSpec
{
    extend TJobSpec
    {
        optional TMergeJobSpec merge_job_spec = 102;
    }

    repeated TTableInputSpec input_spec = 1;
    required TTableOutputSpec output_spec = 2;
    required NYT.NProto.TGuid output_transaction_id = 3;
}

message TMergeJobResult
{
    extend TJobResult
    {
        optional TMergeJobResult merge_job_result = 101;
    }

    repeated NYT.NTableClient.NProto.TInputChunk chunks = 1;
}

////////////////////////////////////////////////////////////////////////////////

// Partition jobs.
/*
 * A partition jobs read the input and scatters the rows into buckets depending
 * on their keys. When a bucket becomes full, it is written as a block.
 * Output blocks are marked with |partition_tag| to enable subsequently
 * started sort jobs to fetch appropriate portions of data.
 */
message TPartitionJobSpec
{
    extend TJobSpec
    {
        optional TPartitionJobSpec partition_job_spec = 103;
    }

    required TTableInputSpec input_spec = 1;
    required TTableOutputSpec output_spec = 2;
    repeated NYT.NTableClient.NProto.TKey partition_keys = 3;
    required NYT.NProto.TGuid output_transaction_id = 4;
    repeated string key_columns = 5;
}

message TPartitionJobResult
{
    extend TJobResult
    {
        optional TPartitionJobResult partition_job_result = 102;
    }

    repeated NYT.NTableClient.NProto.TInputChunk chunks = 1;
}

////////////////////////////////////////////////////////////////////////////////

// Sort jobs.
/*
 * A sort job reads the input chunks, sorts the rows, and then flushes
 * the rows into a sequence of output chunks.
 */
message TSortJobSpec
{
    extend TJobSpec
    {
        optional TSortJobSpec sort_job_spec = 104;
    }

    required TTableInputSpec input_spec = 1;
    required TTableOutputSpec output_spec = 2;
    optional int32 partition_tag = 3 [default = -1];
    required NYT.NProto.TGuid output_transaction_id = 4;
    repeated string key_columns = 5;
}

message TSortJobResult
{
    extend TJobResult
    {
        optional TSortJobResult sort_job_result = 103;
    }

    repeated NYT.NTableClient.NProto.TInputChunk chunks = 1;
}

////////////////////////////////////////////////////////////////////////////////
