package NYT.NScheduler.NProto;

import "yt/ytlib/scheduler/job.proto";
import "yt/ytlib/rpc/rpc.proto";
import "yt/ytlib/misc/error.proto";
import "yt/ytlib/misc/guid.proto";

////////////////////////////////////////////////////////////////////////////////

// Starts a new operation.

message TReqStartOperation
{ 
    // EOperationType value.
    required int32 type = 1;
    // User (typically top-level) transaction where the operation
    // processing must happen.
    required NYT.NProto.TGuid transaction_id = 2;
    // Operation spec in YSON. 
    required bytes spec = 3;
}

message TRspStartOperation
{
    required NYT.NProto.TGuid operation_id = 1;
}

////////////////////////////////////////////////////////////////////////////////

// Aborts an existing operation.

message TReqAbortOperation
{ 
    required NYT.NProto.TGuid operation_id = 1;
}

message TRspAbortOperation
{ }

////////////////////////////////////////////////////////////////////////////////

// Waits until a given operation is finished.

message TOperationResult
{
    required NYT.NProto.TError error = 1;
}

message TReqWaitForOperation
{ 
    required NYT.NProto.TGuid operation_id = 1;
    // Specifies a timeout to wait for the operation to complete.
    required int64 timeout = 4;
}

message TRspWaitForOperation
{
    // If True then the operation may have just finished (either successfully or not).
    // The client will be retrieving the outcome from Cypress.
    required bool maybe_finished = 1;
}

////////////////////////////////////////////////////////////////////////////////

// Informs the scheduler about exec node status and
// requests orders.

message TJobStatus
{
    required NYT.NProto.TGuid job_id = 1;
    required int32 state = 2;
    required int32 phase = 3;
    required double progress = 4;
    optional TJobResult result = 5;
    optional TNodeResources resource_usage = 6;
}

message TReqHeartbeat
{
    required string address = 1;
    required TNodeResources resource_usage = 2;
    required TNodeResources resource_limits = 3;
    repeated TJobStatus jobs = 4;
}

message TJobStartInfo
{
    required NYT.NProto.TGuid job_id = 1;
    required TJobSpec spec = 2;
    // Resource limits as predicted by the scheduler.
    required TNodeResources resource_limits = 3;
}

message TRspHeartbeat
{
    repeated TJobStartInfo jobs_to_start = 1;
    repeated NYT.NProto.TGuid jobs_to_abort = 2;
    repeated NYT.NProto.TGuid jobs_to_remove = 3;
}

////////////////////////////////////////////////////////////////////////////////

