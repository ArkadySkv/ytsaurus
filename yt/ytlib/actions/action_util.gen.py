#!/usr/bin/python

print '#pragma once'
print
print '// WARNING: autogenerated, do not edit!'
print '// WARNING: autogenerated, do not try to understand!'
print
print '#include "action.h"'
print
print '#include "../misc/common.h"'
print '#include "../misc/ptr.h"'
print
print 'namespace NYT {'
print

print '////////////////////////////////////////////////////////////////////////////////'
print
print 'template <class T>'
print 'struct TActionTargetTraits'
print '{ };'
print
print 'template<class T>'
print 'struct TActionTargetTraits< TIntrusivePtr<T> >'
print '{'
print '    typedef T TUnderlying;'
print
print '    static TUnderlying* Get(TIntrusivePtr<T> ptr)'
print '    {'
print '        return ~ptr;';
print '    }'
print '};'
print
print 'template<class T>'
print 'struct TActionTargetTraits<T*>'
print '{'
print '    typedef T TUnderlying;'
print
print '    static TUnderlying* Get(T* ptr)'
print '    {'
print '        return ptr;';
print '    }'
print '};'
print

print '////////////////////////////////////////////////////////////////////////////////'
print
print 'template <class T>'
print 'struct TActionArgTraits'
print '{'
print '    typedef T TCopy;'
print '};'
print
print 'template<class T>'
print 'struct TActionArgTraits<const T&>'
print '{'
print '    typedef T TCopy;'
print '};'
print

MAX_ARGS = 5

for numArgs in xrange(MAX_ARGS):
    argsRange = range(1, numArgs + 1)
    maybeComma = ',' if numArgs > 0 else ''

    print '////////////////////////////////////////////////////////////////////////////////'
    print

    print 'template <' + ', '.join(['class TTargetPtr'] + map(lambda i: 'class TArg' + str(i), argsRange)) + '>'
    print 'class TActionMethodThunk' + str(numArgs)
    print '    : public IAction'
    print '{'
    print 'private:'
    print '    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;'
    print '    typedef void (TUnderlying::* TMethod)(' + ', '.join(map(lambda i: 'TArg' + str(i), argsRange)) + ');'
    for i in argsRange:
        print '    typedef typename TActionArgTraits<TArg' + str(i) + '>::TCopy TArgCopy' + str(i) + ';';
    print
    print '    TTargetPtr Target;'
    print '    TMethod Method;'
    for i in argsRange:
        print '    TArgCopy' + str(i) + ' Arg' + str(i) + ';';
    print
    print 'public:'
    print '    TActionMethodThunk' + str(numArgs) + '(' + \
        ', '.join(['TTargetPtr target', 'TMethod method'] + map(lambda i: 'const TArgCopy' + str(i) + '& arg' + str(i), argsRange)) + \
        ')'
    print '        : ' + ', '.join(['Target(target)', 'Method(method)'] + map(lambda i: 'Arg' + str(i) + '(arg' + str(i) + ')', argsRange))
    print '    { }'
    print
    print '    virtual void Do()'
    print '    {'
    print '        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);'
    print '        (target->*Method)(' + ', '.join(map(lambda i: 'Arg' + str(i), argsRange)) + ');'
    print '    }'
    print '};'
    print
    print 'template <' + ', '.join(['class TTargetPtr', 'class TUnderlying'] + map(lambda i: 'class TArg' + str(i), argsRange)) + '>'
    print 'IAction::TPtr FromMethod('
    print '    void (TUnderlying::* method)(' + ', '.join(map(lambda i: 'TArg' + str(i), argsRange)) + '),'
    print '    TTargetPtr target' + maybeComma
    print '    ' + ', '.join(map(lambda i: 'const typename TActionArgTraits<TArg' + str(i) + '>::TCopy& arg' + str(i), argsRange)) + ')'
    print '{'
    print '    return new TActionMethodThunk' + str(numArgs) + \
        '<' + ','.join(['TTargetPtr'] + map(lambda i: 'TArg' + str(i), argsRange)) +'>' + \
        '(' + ', '.join(['target', 'method'] + map(lambda i: 'arg' + str(i), argsRange)) + ');'
    print '}'
    print
   
    print 'template <' + ', '.join(['class TParam, class TTargetPtr'] + map(lambda i: 'class TArg' + str(i), argsRange)) + '>'
    print 'class TParamActionMethodThunk' + str(numArgs)
    print '    : public IParamAction<TParam>'
    print '{'
    print 'private:'
    print '    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;'
    print '    typedef void (TUnderlying::* TMethod)(' + ', '.join(['TParam'] + map(lambda i: 'TArg' + str(i), argsRange)) + ');'
    for i in argsRange:
        print '    typedef typename TActionArgTraits<TArg' + str(i) + '>::TCopy TArgCopy' + str(i) + ';';
    print
    print '    TTargetPtr Target;'
    print '    TMethod Method;'
    for i in argsRange:
        print '    TArgCopy' + str(i) + ' Arg' + str(i) + ';';
    print
    print 'public:'
    print '    TParamActionMethodThunk' + str(numArgs) + '(' + \
        ', '.join(['TTargetPtr target', 'TMethod method'] + map(lambda i: 'const TArgCopy' + str(i) + '& arg' + str(i), argsRange)) + \
        ')'
    print '        : ' + ', '.join(['Target(target)', 'Method(method)'] + map(lambda i: 'Arg' + str(i) + '(arg' + str(i) + ')', argsRange))
    print '    { }'
    print
    print '    virtual void Do(TParam param)'
    print '    {'
    print '        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);'
    print '        (target->*Method)(' + ', '.join(['param'] + map(lambda i: 'Arg' + str(i), argsRange)) + ');'
    print '    }'
    print '};'
    print
    print 'template <' + ', '.join(['class TParam', 'class TTargetPtr', 'class TUnderlying'] + map(lambda i: 'class TArg' + str(i), argsRange)) + '>'
    print 'typename IParamAction<TParam>::TPtr FromMethod('
    print '    void (TUnderlying::* method)(' + ', '.join(['TParam'] + map(lambda i: 'TArg' + str(i), argsRange)) + '),'
    print '    TTargetPtr target' + maybeComma
    print '    ' + ', '.join(map(lambda i: 'const typename TActionArgTraits<TArg' + str(i) + '>::TCopy& arg' + str(i), argsRange)) + ')'
    print '{'
    print '    return new TParamActionMethodThunk' + str(numArgs) + \
        '<' + ','.join(['TParam', 'TTargetPtr'] + map(lambda i: 'TArg' + str(i), argsRange)) +'>(' + \
        ', '.join(['target', 'method'] + map(lambda i: 'arg' + str(i), argsRange)) + ');'
    print '}'
    print

    print 'template <' + ', '.join(['class TParam, class TResult, class TTargetPtr'] + map(lambda i: 'class TArg' + str(i), argsRange)) + '>'
    print 'class TParamFuncMethodThunk' + str(numArgs)
    print '    : public IParamFunc<TParam, TResult>'
    print '{'
    print 'private:'
    print '    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;'
    print '    typedef TResult (TUnderlying::* TMethod)(' + ', '.join(['TParam'] + map(lambda i: 'TArg' + str(i), argsRange)) + ');'
    for i in argsRange:
        print '    typedef typename TActionArgTraits<TArg' + str(i) + '>::TCopy TArgCopy' + str(i) + ';';
    print
    print '    TTargetPtr Target;'
    print '    TMethod Method;'
    for i in argsRange:
        print '    TArgCopy' + str(i) + ' Arg' + str(i) + ';';
    print
    print 'public:'
    print '    TParamFuncMethodThunk' + str(numArgs) + '(' + \
        ', '.join(['TTargetPtr target', 'TMethod method'] + map(lambda i: 'const TArgCopy' + str(i) + '& arg' + str(i), argsRange)) + \
        ')'
    print '        : ' + ', '.join(['Target(target)', 'Method(method)'] + map(lambda i: 'Arg' + str(i) + '(arg' + str(i) + ')', argsRange))
    print '    { }'
    print
    print '    virtual TResult Do(TParam param)'
    print '    {'
    print '        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);'
    print '        return (target->*Method)(' + ', '.join(['param'] + map(lambda i: 'Arg' + str(i), argsRange)) + ');'
    print '    }'
    print '};'
    print
    print 'template <' + ', '.join(['class TParam', 'class TResult', 'class TTargetPtr', 'class TUnderlying'] + map(lambda i: 'class TArg' + str(i), argsRange)) + '>'
    print 'typename IParamFunc<TParam, TResult>::TPtr FromMethod('
    print '    TResult (TUnderlying::* method)(' + ', '.join(['TParam'] + map(lambda i: 'TArg' + str(i), argsRange)) + '),'
    print '    TTargetPtr target' + maybeComma
    print '    ' + ', '.join(map(lambda i: 'const typename TActionArgTraits<TArg' + str(i) + '>::TCopy& arg' + str(i), argsRange)) + ')'
    print '{'
    print '    return new TParamFuncMethodThunk' + str(numArgs) + \
        '<' + ','.join(['TParam', 'TResult', 'TTargetPtr'] + map(lambda i: 'TArg' + str(i), argsRange)) +'>(' + \
        ', '.join(['target', 'method'] + map(lambda i: 'arg' + str(i), argsRange)) + ');'
    print '}'
    print

    print 'template <' + ', '.join(['class TResult, class TTargetPtr'] + map(lambda i: 'class TArg' + str(i), argsRange)) + '>'
    print 'class TFuncMethodThunk' + str(numArgs)
    print '    : public IFunc<TResult>'
    print '{'
    print 'private:'
    print '    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;'
    print '    typedef TResult (TUnderlying::* TMethod)(' + ', '.join(map(lambda i: 'TArg' + str(i), argsRange)) + ');'
    for i in argsRange:
        print '    typedef typename TActionArgTraits<TArg' + str(i) + '>::TCopy TArgCopy' + str(i) + ';';
    print
    print '    TTargetPtr Target;'
    print '    TMethod Method;'
    for i in argsRange:
        print '    TArgCopy' + str(i) + ' Arg' + str(i) + ';';
    print
    print 'public:'
    print '    TFuncMethodThunk' + str(numArgs) + '(' + \
        ', '.join(['TTargetPtr target', 'TMethod method'] + map(lambda i: 'const TArgCopy' + str(i) + '& arg' + str(i), argsRange)) + \
        ')'
    print '        : ' + ', '.join(['Target(target)', 'Method(method)'] + map(lambda i: 'Arg' + str(i) + '(arg' + str(i) + ')', argsRange))
    print '    { }'
    print
    print '    virtual TResult Do()'
    print '    {'
    print '        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);'
    print '        return (target->*Method)(' + ', '.join(map(lambda i: 'Arg' + str(i), argsRange)) + ');'
    print '    }'
    print '};'
    print
    print 'template <' + ', '.join(['class TResult', 'class TTargetPtr', 'class TUnderlying'] + map(lambda i: 'class TArg' + str(i), argsRange)) + '>'
    print 'typename IFunc<TResult>::TPtr FromMethod('
    print '    TResult (TUnderlying::* method)(' + ', '.join(map(lambda i: 'TArg' + str(i), argsRange)) + '),'
    print '    TTargetPtr target' + maybeComma
    print '    ' + ', '.join(map(lambda i: 'const typename TActionArgTraits<TArg' + str(i) + '>::TCopy& arg' + str(i), argsRange)) + ')'
    print '{'
    print '    return new TFuncMethodThunk' + str(numArgs) + \
        '<' + ','.join(['TResult', 'TTargetPtr'] + map(lambda i: 'TArg' + str(i), argsRange)) +'>(' + \
        ', '.join(['target', 'method'] + map(lambda i: 'arg' + str(i), argsRange)) + ');'
    print '}'
    print

    if numArgs > 0:
        print 'template <' + ', '.join(map(lambda i: 'class TArg' + str(i), argsRange)) + '>'
    print 'class TActionProcThunk' + str(numArgs)
    print '    : public IAction'
    print '{'
    print 'private:'
    print '    typedef void (* TMethod)(' + ', '.join(map(lambda i: 'TArg' + str(i), argsRange)) + ');'
    for i in argsRange:
        print '    typedef typename TActionArgTraits<TArg' + str(i) + '>::TCopy TArgCopy' + str(i) + ';';
    print
    print '    TMethod Method;'
    for i in argsRange:
        print '    TArgCopy' + str(i) + ' Arg' + str(i) + ';';
    print
    print 'public:'
    print '    TActionProcThunk' + str(numArgs) + '(' + \
        ', '.join(['TMethod method'] + map(lambda i: 'const TArgCopy' + str(i) + '& arg' + str(i), argsRange)) + \
        ')'
    print '        : ' + ', '.join(['Method(method)'] + map(lambda i: 'Arg' + str(i) + '(arg' + str(i) + ')', argsRange))
    print '    { }'
    print
    print '    virtual void Do()'
    print '    {'
    print '        (*Method)(' + ', '.join(map(lambda i: 'Arg' + str(i), argsRange)) + ');'
    print '    }'
    print '};'
    print

    if numArgs > 0:
        print 'template <' + ', '.join(map(lambda i: 'class TArg' + str(i), argsRange)) + '>'
    else:
        print 'inline',
    print 'IAction::TPtr FromMethod('
    print '    void (* method)(' + ', '.join(map(lambda i: 'TArg' + str(i), argsRange)) + ')' + maybeComma
    print '    ' + ', '.join(map(lambda i: 'const typename TActionArgTraits<TArg' + str(i) + '>::TCopy& arg' + str(i), argsRange)) + ')'
    print '{'
    print '    return new TActionProcThunk' + str(numArgs) + \
        ('<' + ','.join(map(lambda i: 'TArg' + str(i), argsRange)) +'>' if numArgs > 0 else '') + \
        '(' + ', '.join(['method'] + map(lambda i: 'arg' + str(i), argsRange)) + ');'
    print '}'
    print

    print 'template <' + ', '.join(['class TParam'] + map(lambda i: 'class TArg' + str(i), argsRange)) + '>'
    print 'class TParamActionProcThunk' + str(numArgs)
    print '    : public IParamAction<TParam>'
    print '{'
    print 'private:'
    print '    typedef void (* TMethod)(' + ', '.join(['TParam'] + map(lambda i: 'TArg' + str(i), argsRange)) + ');'
    for i in argsRange:
        print '    typedef typename TActionArgTraits<TArg' + str(i) + '>::TCopy TArgCopy' + str(i) + ';';
    print
    print '    TMethod Method;'
    for i in argsRange:
        print '    TArgCopy' + str(i) + ' Arg' + str(i) + ';';
    print
    print 'public:'
    print '    TParamActionProcThunk' + str(numArgs) + '(' + \
        ', '.join(['TMethod method'] + map(lambda i: 'const TArgCopy' + str(i) + '& arg' + str(i), argsRange)) + \
        ')'
    print '        : ' + ', '.join(['Method(method)'] + map(lambda i: 'Arg' + str(i) + '(arg' + str(i) + ')', argsRange))
    print '    { }'
    print
    print '    virtual void Do(TParam param)'
    print '    {'
    print '        (*Method)(' + ', '.join(['param'] + map(lambda i: 'Arg' + str(i), argsRange)) + ');'
    print '    }'
    print '};'
    print
    print 'template <' + ', '.join(['class TParam'] + map(lambda i: 'class TArg' + str(i), argsRange)) + '>'
    print 'typename IParamAction<TParam>::TPtr FromMethod('
    print '    void (* method)(' + ', '.join(['TParam'] + map(lambda i: 'TArg' + str(i), argsRange)) + ')' + maybeComma
    print '    ' + ', '.join(map(lambda i: 'const typename TActionArgTraits<TArg' + str(i) + '>::TCopy& arg' + str(i), argsRange)) + ')'
    print '{'
    print '    return new TParamActionProcThunk' + str(numArgs) + \
        '<' + ','.join(['TParam'] + map(lambda i: 'TArg' + str(i), argsRange)) +'>' + \
        '(' + ', '.join(['method'] + map(lambda i: 'arg' + str(i), argsRange)) + ');'
    print '}'
    print

    print 'template <' + ', '.join(['class TResult'] + map(lambda i: 'class TArg' + str(i), argsRange)) + '>'
    print 'class TFuncProcThunk' + str(numArgs)
    print '    : public IFunc<TResult>'
    print '{'
    print 'private:'
    print '    typedef TResult (* TMethod)(' + ', '.join(map(lambda i: 'TArg' + str(i), argsRange)) + ');'
    for i in argsRange:
        print '    typedef typename TActionArgTraits<TArg' + str(i) + '>::TCopy TArgCopy' + str(i) + ';';
    print
    print '    TMethod Method;'
    for i in argsRange:
        print '    TArgCopy' + str(i) + ' Arg' + str(i) + ';';
    print
    print 'public:'
    print '    TFuncProcThunk' + str(numArgs) + '(' + \
        ', '.join(['TMethod method'] + map(lambda i: 'const TArgCopy' + str(i) + '& arg' + str(i), argsRange)) + \
        ')'
    print '        : ' + ', '.join(['Method(method)'] + map(lambda i: 'Arg' + str(i) + '(arg' + str(i) + ')', argsRange))
    print '    { }'
    print
    print '    virtual TResult Do()'
    print '    {'
    print '        return (*Method)(' + ', '.join(map(lambda i: 'Arg' + str(i), argsRange)) + ');'
    print '    }'
    print '};'
    print
    print 'template <' + ', '.join(['class TResult'] + map(lambda i: 'class TArg' + str(i), argsRange)) + '>'
    print 'typename IFunc<TResult>::TPtr FromMethod('
    print '    TResult (* method)(' + ', '.join(map(lambda i: 'TArg' + str(i), argsRange)) + ')' + maybeComma
    print '    ' + ', '.join(map(lambda i: 'const typename TActionArgTraits<TArg' + str(i) + '>::TCopy& arg' + str(i), argsRange)) + ')'
    print '{'
    print '    return new TFuncProcThunk' + str(numArgs) + \
        '<' + ','.join(['TResult'] + map(lambda i: 'TArg' + str(i), argsRange)) +'>' + \
        '(' + ', '.join(['method'] + map(lambda i: 'arg' + str(i), argsRange)) + ');'
    print '}'
    print

    print 'template <' + ', '.join(['class TParam', 'class TResult'] + map(lambda i: 'class TArg' + str(i), argsRange)) + '>'
    print 'class TParamFuncProcThunk' + str(numArgs)
    print '    : public IParamFunc<TParam, TResult>'
    print '{'
    print 'private:'
    print '    typedef TResult (* TMethod)(' + ', '.join(['TParam'] + map(lambda i: 'TArg' + str(i), argsRange)) + ');'
    for i in argsRange:
        print '    typedef typename TActionArgTraits<TArg' + str(i) + '>::TCopy TArgCopy' + str(i) + ';';
    print
    print '    TMethod Method;'
    for i in argsRange:
        print '    TArgCopy' + str(i) + ' Arg' + str(i) + ';';
    print
    print 'public:'
    print '    TParamFuncProcThunk' + str(numArgs) + '(' + \
        ', '.join(['TMethod method'] + map(lambda i: 'const TArgCopy' + str(i) + '& arg' + str(i), argsRange)) + \
        ')'
    print '        : ' + ', '.join(['Method(method)'] + map(lambda i: 'Arg' + str(i) + '(arg' + str(i) + ')', argsRange))
    print '    { }'
    print
    print '    virtual TResult Do(TParam param)'
    print '    {'
    print '        return (*Method)(' + ', '.join(['param'] + map(lambda i: 'Arg' + str(i), argsRange)) + ');'
    print '    }'
    print '};'
    print
    print 'template <' + ', '.join(['class TParam', 'class TResult'] + map(lambda i: 'class TArg' + str(i), argsRange)) + '>'
    print 'typename IParamFunc<TParam, TResult>::TPtr FromMethod('
    print '    TResult (* method)(' + ', '.join(['TParam'] + map(lambda i: 'TArg' + str(i), argsRange)) + ')' + maybeComma
    print '    ' + ', '.join(map(lambda i: 'const typename TActionArgTraits<TArg' + str(i) + '>::TCopy& arg' + str(i), argsRange)) + ')'
    print '{'
    print '    return new TParamFuncProcThunk' + str(numArgs) + \
        '<' + ','.join(['TParam', 'TResult'] + map(lambda i: 'TArg' + str(i), argsRange)) +'>' + \
        '(' + ', '.join(['method'] + map(lambda i: 'arg' + str(i), argsRange)) + ');'
    print '}'
    print

print '////////////////////////////////////////////////////////////////////////////////'
print
print '} // namespace NYT'
