set( DIRS
  misc
  pipes
  ypath
  election
  orchid
  driver
  query_client
  scheduler
  chunk_client
  cypress_client
  file_client
  table_client
  new_table_client
  object_client
  security_client
  node_tracker_client
  job_tracker_client
  transaction_client
  tablet_client
  monitoring
  hydra
  hive
  formats
  api
)

foreach( _d_ ${DIRS} )
  include( ${_d_}/CMakeLists.txt )
  source_group( ${_d_} REGULAR_EXPRESSION "${_d_}/.*\\.((cpp)|(h)|(proto))")
endforeach()

add_msvc_precompiled_header(
  stdafx.h
  stdafx.cpp
  YT_SOURCE_FILES
)

add_library( ytlib STATIC
  ${YT_SOURCE_FILES}
  shutdown.cpp
)

if ("${CMAKE_BUILD_TYPE}" STREQUAL "Sanitizer")
  target_link_libraries ( ytlib
    ytcore-without-lfalloc
  )
else()
  target_link_libraries ( ytlib
    ytcore
  )
endif()

if (YT_BUILD_ENABLE_LLVM)
  llvm_map_components_to_libraries(REQ_LLVM_LIBRARIES jit native)
  target_link_libraries ( ytlib
    ${REQ_LLVM_LIBRARIES}
  )

  include_directories(
    ${LLVM_INCLUDE_DIRS}
  )
endif()

if (HAVE_LIBUNWIND)
  target_link_libraries( ytlib unwind )
endif()

if (YT_BUILD_ENABLE_PYTHON)
  add_library( ytlib-without-lfalloc STATIC
      ${YT_SOURCE_FILES}
      shutdown.cpp
  )
  target_link_libraries ( ytlib-without-lfalloc
    ytcore-without-lfalloc
  )
endif()

include_directories(
  ${CMAKE_SOURCE_DIR}
  ${CMAKE_SOURCE_DIR}/yt
  ${CMAKE_SOURCE_DIR}/contrib/tclap
  ${CMAKE_BINARY_DIR}
  ${CMAKE_BINARY_DIR}/include
  .
)
