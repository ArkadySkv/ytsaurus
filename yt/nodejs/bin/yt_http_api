#!/usr/bin/env node

var cluster = require("cluster");
var fs = require("fs");

var connect = require("connect");
var winston = require("winston");

var yt = require("yt");

var opts = require("optimist")
    .usage("Provide HTTP API for YT.\nUsage: $0")

    .alias("c", "config")
    .default("c", "/etc/yt_http_api.conf")
    .describe("c", "Specify configuration file")

    .alias("p", "port")
    .describe("p", "Specify port to listen")

    .alias("a", "address")
    .describe("a", "Specify address to listen")

    .alias("n", "number-of-workers")
    .describe("n", "Specify number of worker processes")

    .alias("m", "memory-limit")
    .describe("m", "Specify memory limit (in MB) for data buffer size for each request")

    .alias("t", "thread-limit")
    .describe("t", "Specify thread limit for concurrent off-loop processing")

    .alias("s", "spare-threads")
    .describe("s", "Specify a number of threads reserved for non-heavy tasks")

    .alias("l", "log")
    .describe("l", "Specify log file")

    .alias("u", "user")
    .describe("u", "Specify a user to setuid() to")

    .alias("g", "group")
    .describe("g", "Specify a group to setgid() to")

    .alias("h", "help")
    .boolean("h")
    .describe("h", "Show help message")

    .boolean("profiler")
    .describe("profiler", "Enable V8 profiler")
    ;

if (opts.argv.h) {
    opts.showHelp();
    process.exit(0);
}

////////////////////////////////////////////////////////////////////////////////

function merge(lhs, rhs) {
    for (var p in rhs) {
        try {
            if (typeof(rhs[p]) !== "undefined" && rhs[p] !== null) {
                if (rhs[p].constructor === Object) {
                    lhs[p] = merge(lhs[p], rhs[p]);
                } else {
                    lhs[p] = rhs[p];
                }
            }
        } catch(err) {
            lhs[p] = rhs[p];
        }
    }
    return lhs;
}

var configuration;
configuration = {
    port              : 80,
    address           : "0.0.0.0",
    neighbours        : [ "localhost" ],
    number_of_workers : 4,
    memory_limit      : 32 * 1024 * 1024,
    thread_limit      : 32,
    spare_threads     : 4,
};
configuration = merge(configuration, JSON.parse(fs.readFileSync(opts.argv.c, "utf8")) || {});
configuration = merge(configuration, {
    port              : opts.argv.p && parseInt(opts.argv.p),
    address           : opts.argv.a,
    number_of_workers : opts.argv.n && parseInt(opts.argv.n),
    memory_limit      : opts.argv.m && parseInt(opts.argv.m) * 1024 * 1024,
    thread_limit      : opts.argv.t && parseInt(opts.argv.t),
    spare_threads     : opts.argv.s && parseInt(opts.argv.s),
    logging           : opts.argv.l && { filename : opts.argv.l, timestamp : true, raw : true },
    user              : opts.argv.u,
    group             : opts.argv.g
});

// console.error(JSON.stringify(configuration, null, 2));
// try {
//     var assert = require("chai").assert;
//     assert.operator(configuration.number_of_workers, ">=", 0);
//     assert.operator(configuration.memory_limit, ">=", 1024 * 1024, "Memory limit should be specified in MB");
//     assert.operator(configuration.thread_limit, ">=", 4);
//     assert.operator(configuration.spare_threads, ">=", 0);
// } catch(err) { . . . }

////////////////////////////////////////////////////////////////////////////////

process.title = "YtHttpProxy";

var agent = null;
var profiler = null;

var logger = new winston.Logger({
    transports: [ configuration.logging
        ? new winston.transports.File(configuration.logging)
        : new winston.transports.Console({ timestamp: true, raw: true })
    ]
});

if (opts.argv.profiler) {
    agent = require("webkit-devtools-agent");
    profiler = require("v8-profiler");
    console.error("*** V8 Profiler and WebKit Developer Tools are enabled");
    console.error("*** Send SIGUSR1 to fire up debugger");
    console.error("*** Send SIGUSR2 to take a heap snapshot and fire up DT");
}

if (configuration.number_of_workers > 0 && cluster.isMaster) {
    function spawnWorker() {
        var worker = cluster.fork();

        logger.info("Spawned worker", { pid : worker.pid });

        worker.on("message", function(message) {
            if (message && message.fatal) {
                logger.error("Worker has generated a fatal error", { id : (worker.uniqueId || worker.id), pid : worker.pid });
                logger.error("Terminating master process");
                process.exit(1);
            }
        });
    }

    for (var i = 0; i < configuration.number_of_workers; ++i) {
        spawnWorker();
    }

    cluster.on("death", function(worker) {
        logger.info("Worker has died; restarting", { id : (worker.uniqueId || worker.id), pid : worker.pid });
        spawnWorker();
    });
} else {
    if (opts.argv.profiler) {
        process.on("SIGUSR1", function() {
            console.error("*** Debugger should be running");
        });
        process.on("SIGUSR2", function() {
            var snapshot = "snap-" + (new Date()).toISOString();
            profiler.takeSnapshot(snapshot);
            console.error("*** Taken heap snapshot '" + snapshot + "'");
        });
    }

    try {
        connect()
            .use(connect.favicon())
            .use(yt.YtAssignRequestID())
            .use(yt.YtLogger(logger))
            .use("/api", yt.YtApplication(logger, configuration))
            .use("/hosts", function(req, rsp) {
                var body = JSON.stringify(configuration.neighbours);
                rsp.writeHead(200, {
                    "Content-Length" : body.length,
                    "Content-Type" : "application/json"
                });
                rsp.end(body);
            })
            .listen(configuration.port, configuration.address, function() {
                if (configuration.group) {
                    process.setgid(configuration.group);
                }

                if (configuration.user) {
                    process.setuid(configuration.user);
                }

                if (process.getuid() == 0 || process.getgid() == 0) {
                    logger.error("Failed to drop privileges; aborting");
                    if (process.send) process.send({ fatal : true });
                    process.exit(100);
                }
            });
    } catch(err) {
        logger.error("Error '" + err.message + "' while calling '" + err.syscall + "'; aborting");
        console.error(err.stack);
        if (process.send) process.send({ fatal : true });
        process.exit(200);
    }
}
