#!/usr/bin/env python

import yt
from common import flatten, unlist

import sys
from argparse import ArgumentParser

def add_store_args(parser, args):
    for arg in flatten(args):
        parser.add_argument("-" + arg)
def add_bool_args(parser, args):
    for arg in flatten(args):
        parser.add_argument("-" + arg, action="store_true", default=False)
def add_multiple_args(parser, args):
    for arg in flatten(args):
        parser.add_argument("-" + arg, action="append")

if __name__ == "__main__":
    # TODO(ignat): add unsupported arguments
    action_stores = ["read", "write", "map", "reduce", "drop"]
    action_flags = ["version", "copy", "sort"]
    
    parser = ArgumentParser()
    add_bool_args(parser, action_flags + ["subkey", "lenval"])
    add_store_args(parser, action_stores + ["server"])
    add_multiple_args(parser, ["src", "dst", "file"])
    args = parser.parse_args()

    actions_count = sum([vars(args)[arg] is not None for arg in action_stores]) + \
                    sum([vars(args)[arg] for arg in action_flags])
    if actions_count != 1:
        print >>sys.stderr, "You should pass exactly one action"
        exit(0)

    if args.version:
        print "Version: wrapper on YT distributed system"
        exit(0)

    if args.server is not None:
        yt.DEFAULT_PROXY = args.server
    yt.default_format = yt.YamrFormat(lenval=args.lenval, has_subkey=args.subkey)
    if args.read is not None:
        sys.stdout.writelines(yt.read_table(args.read))
    if args.write is not None:
        yt.write_table(args.write, sys.stdin)
    if args.map is not None:
        yt.run_map(args.map, args.src, args.dst, files=args.file)
    if args.reduce is not None:
        yt.run_reduce(args.reduce, args.src, args.dst, files=args.file)
    if args.drop is not None:
        yt.remove_table(args.drop)
    if args.copy:
        yt.copy_table(args.src, unlist(args.dst))
    if args.sort:
        # TODO(ignat): add using dst here
        yt.sort_table(unlist(args.src))

