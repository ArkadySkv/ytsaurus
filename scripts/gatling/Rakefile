#!/usr/bin/env rake

require "securerandom"
require "posix/spawn"
require "sshkit/dsl"
require "term/ansicolor"

C = Term::ANSIColor

JAVA_HOME = ENV["JAVA_HOME"] || Dir["/usr/local/jdk1.7*"].first
GATLING_ROOT = File.realpath(File.dirname(__FILE__))
GATLING_HOME = File.join(GATLING_ROOT, "vendor")

def deploy_to
  "/home/sandello/gatling"
end

def deploy_hosts
  %w{
    sandello@n01-0001e.yt.yandex.net
    sandello@n01-0002e.yt.yandex.net
  }
end

def get_bundle
  path = Dir["#{GATLING_HOME}/gatling-bundle/target/*-bundle.tar.gz"].first
  raise "Gatling bundle not found; try running `rake gatling:bundle`." unless path
  name = File.basename(path).gsub(/-bundle\.tar\.gz$/, "")
  return [path, name]
end

#SSHKit.config.output_verbosity = Logger::DEBUG

namespace :gatling do
  desc "Updates local Gatling version"
  task :update do
    unless File.directory?(GATLING_HOME)
      sh "git clone --recursive https://github.com/excilys/gatling.git #{GATLING_HOME}"
    end

    sh "cd #{GATLING_HOME} && git checkout master"
    sh "cd #{GATLING_HOME} && git pull --ff-only --verbose"
  end

  desc "Bundles Gatling"
  task :bundle => :update do
    sh "cd #{GATLING_HOME} && JAVA_HOME=#{JAVA_HOME} mvn package"
  end
end

namespace :deploy do
  desc "Cleans up Gatling servers"
  task :cleanup do
    on deploy_hosts do
      execute "test -d #{deploy_to} && rm -rf #{deploy_to} || true"
    end
  end

  desc "Deploys Gatling"
  task :prepare do
    bundle_path, bundle_name = get_bundle
    deploy_bundle_to = "#{deploy_to}/#{bundle_name}"

    on deploy_hosts do |host|
      execute :sudo, "apt-get install yandex-jdk7"

      unless test("test -d #{deploy_to}/#{bundle_name}")
        execute "mkdir -p #{deploy_to}"
        upload! bundle_path, "#{deploy_to}/bundle.tar.gz"
        execute "cd #{deploy_to} && tar zxvf bundle.tar.gz"
        %w{conf/gatling.conf conf/logback.xml}.each do |file|
          execute "rm -rf #{deploy_bundle_to}/#{file}"
          execute "ln -s #{deploy_to}/#{file} #{deploy_bundle_to}/#{file}"
        end
      end
    end
  end

  desc "Deploys simulations and other custom data"
  task :sync do
    on deploy_hosts do |host|
      prefix = "[" + C.green(host.to_s) + "]"

      info "#{prefix} Running `rsync`..."
      child = POSIX::Spawn::Child.new(*%W{
        rsync
        --archive --delete --verbose --cvs-exclude
        --exclude=results
        --exclude=vendor
        --exclude=Rakefile --exclude=Gemfile --exclude=Gemfile.lock
        --filter=#{"P bundle.tar.gz"}
        --filter=#{"P gatling-bundle*"}
        #{GATLING_ROOT}/
        #{host}:#{deploy_to}
      }, input: nil)
      info "#{prefix} Done (#{child.status})"
      info "#{prefix} STDOUT:\n#{child.out}" if child.out
      info "#{prefix} STDERR:\n#{child.err}" if child.err
    end
  end
end

desc "Runs a simulation"
task :run, [:name] => :"deploy:sync" do |t, args|
  bundle_path, bundle_name = get_bundle
  deploy_bundle_to = "#{deploy_to}/#{bundle_name}"

  name = args.name
  uuid = "yt_#{SecureRandom.hex(4)}"
  time = Time.now.to_i + 15 # 15 seconds to prepare.

  raise "Simulation name is not specified" unless name
  puts "#{C.red("***")} Running simulation '#{C.yellow(name)}' (`#{C.yellow(uuid)}`)..."

  FileUtils.mkdir_p "./results/#{uuid}"

  on deploy_hosts, in: :parallel do |host|
    java_home = capture("find /usr/local -maxdepth 1 -type d -name 'jdk1.7*'").strip
    java_opts = "-Dyt.deadline=#{time}"

    within deploy_to do
      with java_home: java_home, java_opts: java_opts do
        execute :bash, [
          "#{deploy_bundle_to}/bin/gatling.sh",
          "--no-reports",
          "--simulation", name,
          "--output-name", uuid
        ].join(" ")
      end
    end

    source = capture("find #{deploy_to}/results -maxdepth 1 -type d -name '#{uuid}*'").strip
    source = "#{source}/simulation.log"
    target = "./results/#{uuid}/#{host.to_s.gsub(/[^a-zA-Z0-9]/, "_")}.log"

    download! source, target
  end
end

