#pragma once

// WARNING: autogenerated, do not edit!
// WARNING: autogenerated, do not try to understand!

#include "../misc/common.h"
#include "../misc/ptr.h"
#include "action.h"

namespace NYT {

////////////////////////////////////////////////////////////////////////////////

template <class T>
struct TActionTargetTraits
{ };

template<class T>
struct TActionTargetTraits< TIntrusivePtr<T> >
{
    typedef T TUnderlying;

    static TUnderlying* Get(TIntrusivePtr<T> ptr)
    {
        return ~ptr;
    }
};

template<class T>
struct TActionTargetTraits<T*>
{
    typedef T TUnderlying;

    static TUnderlying* Get(T* ptr)
    {
        return ptr;
    }
};

////////////////////////////////////////////////////////////////////////////////

template <class T>
struct TActionArgTraits
{
    typedef T TCopy;
};

template<class T>
struct TActionArgTraits<const T&>
{
    typedef T TCopy;
};

////////////////////////////////////////////////////////////////////////////////

template <class TTargetPtr>
class TActionMethodThunk0
    : public IAction
{
private:
    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;
    typedef void (TUnderlying::* TMethod)();

    TTargetPtr Target;
    TMethod Method;

public:
    TActionMethodThunk0(TTargetPtr target, TMethod method)
        : Target(target), Method(method)
    { }

    virtual void Do()
    {
        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);
        (target->*Method)();
    }
};

template <class TTargetPtr, class TUnderlying>
IAction::TPtr FromMethod(
    void (TUnderlying::* method)(),
    TTargetPtr target
    )
{
    return new TActionMethodThunk0<TTargetPtr>(target, method);
}

template <class TParam, class TTargetPtr>
class TParamActionMethodThunk0
    : public IParamAction<TParam>
{
private:
    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;
    typedef void (TUnderlying::* TMethod)(TParam);

    TTargetPtr Target;
    TMethod Method;

public:
    TParamActionMethodThunk0(TTargetPtr target, TMethod method)
        : Target(target), Method(method)
    { }

    virtual void Do(TParam param)
    {
        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);
        (target->*Method)(param);
    }
};

template <class TParam, class TTargetPtr, class TUnderlying>
typename IParamAction<TParam>::TPtr FromMethod(
    void (TUnderlying::* method)(TParam),
    TTargetPtr target
    )
{
    return new TParamActionMethodThunk0<TParam,TTargetPtr>(target, method);
}

template <class TParam, class TResult, class TTargetPtr>
class TParamFuncMethodThunk0
    : public IParamFunc<TParam, TResult>
{
private:
    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;
    typedef TResult (TUnderlying::* TMethod)(TParam);

    TTargetPtr Target;
    TMethod Method;

public:
    TParamFuncMethodThunk0(TTargetPtr target, TMethod method)
        : Target(target), Method(method)
    { }

    virtual TResult Do(TParam param)
    {
        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);
        return (target->*Method)(param);
    }
};

template <class TParam, class TResult, class TTargetPtr, class TUnderlying>
typename IParamFunc<TParam, TResult>::TPtr FromMethod(
    TResult (TUnderlying::* method)(TParam),
    TTargetPtr target
    )
{
    return new TParamFuncMethodThunk0<TParam,TResult,TTargetPtr>(target, method);
}

template <class TResult, class TTargetPtr>
class TFuncMethodThunk0
    : public IFunc<TResult>
{
private:
    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;
    typedef TResult (TUnderlying::* TMethod)();

    TTargetPtr Target;
    TMethod Method;

public:
    TFuncMethodThunk0(TTargetPtr target, TMethod method)
        : Target(target), Method(method)
    { }

    virtual TResult Do()
    {
        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);
        return (target->*Method)();
    }
};

template <class TResult, class TTargetPtr, class TUnderlying>
typename IFunc<TResult>::TPtr FromMethod(
    TResult (TUnderlying::* method)(),
    TTargetPtr target
    )
{
    return new TFuncMethodThunk0<TResult,TTargetPtr>(target, method);
}

class TActionProcThunk0
    : public IAction
{
private:
    typedef void (* TMethod)();

    TMethod Method;

public:
    TActionProcThunk0(TMethod method)
        : Method(method)
    { }

    virtual void Do()
    {
        (*Method)();
    }
};

inline IAction::TPtr FromMethod(
    void (* method)()
    )
{
    return new TActionProcThunk0(method);
}

template <class TParam>
class TParamActionProcThunk0
    : public IParamAction<TParam>
{
private:
    typedef void (* TMethod)(TParam);

    TMethod Method;

public:
    TParamActionProcThunk0(TMethod method)
        : Method(method)
    { }

    virtual void Do(TParam param)
    {
        (*Method)(param);
    }
};

template <class TParam>
typename IParamAction<TParam>::TPtr FromMethod(
    void (* method)(TParam)
    )
{
    return new TParamActionProcThunk0<TParam>(method);
}

template <class TResult>
class TFuncProcThunk0
    : public IFunc<TResult>
{
private:
    typedef TResult (* TMethod)();

    TMethod Method;

public:
    TFuncProcThunk0(TMethod method)
        : Method(method)
    { }

    virtual TResult Do()
    {
        return (*Method)();
    }
};

template <class TResult>
typename IFunc<TResult>::TPtr FromMethod(
    TResult (* method)()
    )
{
    return new TFuncProcThunk0<TResult>(method);
}

template <class TParam, class TResult>
class TParamFuncProcThunk0
    : public IParamFunc<TParam, TResult>
{
private:
    typedef TResult (* TMethod)(TParam);

    TMethod Method;

public:
    TParamFuncProcThunk0(TMethod method)
        : Method(method)
    { }

    virtual TResult Do(TParam param)
    {
        return (*Method)(param);
    }
};

template <class TParam, class TResult>
typename IParamFunc<TParam, TResult>::TPtr FromMethod(
    TResult (* method)(TParam)
    )
{
    return new TParamFuncProcThunk0<TParam,TResult>(method);
}

////////////////////////////////////////////////////////////////////////////////

template <class TTargetPtr, class TArg1>
class TActionMethodThunk1
    : public IAction
{
private:
    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;
    typedef void (TUnderlying::* TMethod)(TArg1);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;

    TTargetPtr Target;
    TMethod Method;
    TArgCopy1 Arg1;

public:
    TActionMethodThunk1(TTargetPtr target, TMethod method, const TArgCopy1& arg1)
        : Target(target), Method(method), Arg1(arg1)
    { }

    virtual void Do()
    {
        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);
        (target->*Method)(Arg1);
    }
};

template <class TTargetPtr, class TUnderlying, class TArg1>
IAction::TPtr FromMethod(
    void (TUnderlying::* method)(TArg1),
    TTargetPtr target,
    const typename TActionArgTraits<TArg1>::TCopy& arg1)
{
    return new TActionMethodThunk1<TTargetPtr,TArg1>(target, method, arg1);
}

template <class TParam, class TTargetPtr, class TArg1>
class TParamActionMethodThunk1
    : public IParamAction<TParam>
{
private:
    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;
    typedef void (TUnderlying::* TMethod)(TParam, TArg1);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;

    TTargetPtr Target;
    TMethod Method;
    TArgCopy1 Arg1;

public:
    TParamActionMethodThunk1(TTargetPtr target, TMethod method, const TArgCopy1& arg1)
        : Target(target), Method(method), Arg1(arg1)
    { }

    virtual void Do(TParam param)
    {
        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);
        (target->*Method)(param, Arg1);
    }
};

template <class TParam, class TTargetPtr, class TUnderlying, class TArg1>
typename IParamAction<TParam>::TPtr FromMethod(
    void (TUnderlying::* method)(TParam, TArg1),
    TTargetPtr target,
    const typename TActionArgTraits<TArg1>::TCopy& arg1)
{
    return new TParamActionMethodThunk1<TParam,TTargetPtr,TArg1>(target, method, arg1);
}

template <class TParam, class TResult, class TTargetPtr, class TArg1>
class TParamFuncMethodThunk1
    : public IParamFunc<TParam, TResult>
{
private:
    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;
    typedef TResult (TUnderlying::* TMethod)(TParam, TArg1);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;

    TTargetPtr Target;
    TMethod Method;
    TArgCopy1 Arg1;

public:
    TParamFuncMethodThunk1(TTargetPtr target, TMethod method, const TArgCopy1& arg1)
        : Target(target), Method(method), Arg1(arg1)
    { }

    virtual TResult Do(TParam param)
    {
        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);
        return (target->*Method)(param, Arg1);
    }
};

template <class TParam, class TResult, class TTargetPtr, class TUnderlying, class TArg1>
typename IParamFunc<TParam, TResult>::TPtr FromMethod(
    TResult (TUnderlying::* method)(TParam, TArg1),
    TTargetPtr target,
    const typename TActionArgTraits<TArg1>::TCopy& arg1)
{
    return new TParamFuncMethodThunk1<TParam,TResult,TTargetPtr,TArg1>(target, method, arg1);
}

template <class TResult, class TTargetPtr, class TArg1>
class TFuncMethodThunk1
    : public IFunc<TResult>
{
private:
    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;
    typedef TResult (TUnderlying::* TMethod)(TArg1);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;

    TTargetPtr Target;
    TMethod Method;
    TArgCopy1 Arg1;

public:
    TFuncMethodThunk1(TTargetPtr target, TMethod method, const TArgCopy1& arg1)
        : Target(target), Method(method), Arg1(arg1)
    { }

    virtual TResult Do()
    {
        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);
        return (target->*Method)(Arg1);
    }
};

template <class TResult, class TTargetPtr, class TUnderlying, class TArg1>
typename IFunc<TResult>::TPtr FromMethod(
    TResult (TUnderlying::* method)(TArg1),
    TTargetPtr target,
    const typename TActionArgTraits<TArg1>::TCopy& arg1)
{
    return new TFuncMethodThunk1<TResult,TTargetPtr,TArg1>(target, method, arg1);
}

template <class TArg1>
class TActionProcThunk1
    : public IAction
{
private:
    typedef void (* TMethod)(TArg1);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;

    TMethod Method;
    TArgCopy1 Arg1;

public:
    TActionProcThunk1(TMethod method, const TArgCopy1& arg1)
        : Method(method), Arg1(arg1)
    { }

    virtual void Do()
    {
        (*Method)(Arg1);
    }
};

template <class TArg1>
IAction::TPtr FromMethod(
    void (* method)(TArg1),
    const typename TActionArgTraits<TArg1>::TCopy& arg1)
{
    return new TActionProcThunk1<TArg1>(method, arg1);
}

template <class TParam, class TArg1>
class TParamActionProcThunk1
    : public IParamAction<TParam>
{
private:
    typedef void (* TMethod)(TParam, TArg1);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;

    TMethod Method;
    TArgCopy1 Arg1;

public:
    TParamActionProcThunk1(TMethod method, const TArgCopy1& arg1)
        : Method(method), Arg1(arg1)
    { }

    virtual void Do(TParam param)
    {
        (*Method)(param, Arg1);
    }
};

template <class TParam, class TArg1>
typename IParamAction<TParam>::TPtr FromMethod(
    void (* method)(TParam, TArg1),
    const typename TActionArgTraits<TArg1>::TCopy& arg1)
{
    return new TParamActionProcThunk1<TParam,TArg1>(method, arg1);
}

template <class TResult, class TArg1>
class TFuncProcThunk1
    : public IFunc<TResult>
{
private:
    typedef TResult (* TMethod)(TArg1);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;

    TMethod Method;
    TArgCopy1 Arg1;

public:
    TFuncProcThunk1(TMethod method, const TArgCopy1& arg1)
        : Method(method), Arg1(arg1)
    { }

    virtual TResult Do()
    {
        return (*Method)(Arg1);
    }
};

template <class TResult, class TArg1>
typename IFunc<TResult>::TPtr FromMethod(
    TResult (* method)(TArg1),
    const typename TActionArgTraits<TArg1>::TCopy& arg1)
{
    return new TFuncProcThunk1<TResult,TArg1>(method, arg1);
}

template <class TParam, class TResult, class TArg1>
class TParamFuncProcThunk1
    : public IParamFunc<TParam, TResult>
{
private:
    typedef TResult (* TMethod)(TParam, TArg1);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;

    TMethod Method;
    TArgCopy1 Arg1;

public:
    TParamFuncProcThunk1(TMethod method, const TArgCopy1& arg1)
        : Method(method), Arg1(arg1)
    { }

    virtual TResult Do(TParam param)
    {
        return (*Method)(param, Arg1);
    }
};

template <class TParam, class TResult, class TArg1>
typename IParamFunc<TParam, TResult>::TPtr FromMethod(
    TResult (* method)(TParam, TArg1),
    const typename TActionArgTraits<TArg1>::TCopy& arg1)
{
    return new TParamFuncProcThunk1<TParam,TResult,TArg1>(method, arg1);
}

////////////////////////////////////////////////////////////////////////////////

template <class TTargetPtr, class TArg1, class TArg2>
class TActionMethodThunk2
    : public IAction
{
private:
    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;
    typedef void (TUnderlying::* TMethod)(TArg1, TArg2);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;

    TTargetPtr Target;
    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;

public:
    TActionMethodThunk2(TTargetPtr target, TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2)
        : Target(target), Method(method), Arg1(arg1), Arg2(arg2)
    { }

    virtual void Do()
    {
        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);
        (target->*Method)(Arg1, Arg2);
    }
};

template <class TTargetPtr, class TUnderlying, class TArg1, class TArg2>
IAction::TPtr FromMethod(
    void (TUnderlying::* method)(TArg1, TArg2),
    TTargetPtr target,
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2)
{
    return new TActionMethodThunk2<TTargetPtr,TArg1,TArg2>(target, method, arg1, arg2);
}

template <class TParam, class TTargetPtr, class TArg1, class TArg2>
class TParamActionMethodThunk2
    : public IParamAction<TParam>
{
private:
    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;
    typedef void (TUnderlying::* TMethod)(TParam, TArg1, TArg2);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;

    TTargetPtr Target;
    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;

public:
    TParamActionMethodThunk2(TTargetPtr target, TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2)
        : Target(target), Method(method), Arg1(arg1), Arg2(arg2)
    { }

    virtual void Do(TParam param)
    {
        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);
        (target->*Method)(param, Arg1, Arg2);
    }
};

template <class TParam, class TTargetPtr, class TUnderlying, class TArg1, class TArg2>
typename IParamAction<TParam>::TPtr FromMethod(
    void (TUnderlying::* method)(TParam, TArg1, TArg2),
    TTargetPtr target,
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2)
{
    return new TParamActionMethodThunk2<TParam,TTargetPtr,TArg1,TArg2>(target, method, arg1, arg2);
}

template <class TParam, class TResult, class TTargetPtr, class TArg1, class TArg2>
class TParamFuncMethodThunk2
    : public IParamFunc<TParam, TResult>
{
private:
    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;
    typedef TResult (TUnderlying::* TMethod)(TParam, TArg1, TArg2);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;

    TTargetPtr Target;
    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;

public:
    TParamFuncMethodThunk2(TTargetPtr target, TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2)
        : Target(target), Method(method), Arg1(arg1), Arg2(arg2)
    { }

    virtual TResult Do(TParam param)
    {
        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);
        return (target->*Method)(param, Arg1, Arg2);
    }
};

template <class TParam, class TResult, class TTargetPtr, class TUnderlying, class TArg1, class TArg2>
typename IParamFunc<TParam, TResult>::TPtr FromMethod(
    TResult (TUnderlying::* method)(TParam, TArg1, TArg2),
    TTargetPtr target,
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2)
{
    return new TParamFuncMethodThunk2<TParam,TResult,TTargetPtr,TArg1,TArg2>(target, method, arg1, arg2);
}

template <class TResult, class TTargetPtr, class TArg1, class TArg2>
class TFuncMethodThunk2
    : public IFunc<TResult>
{
private:
    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;
    typedef TResult (TUnderlying::* TMethod)(TArg1, TArg2);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;

    TTargetPtr Target;
    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;

public:
    TFuncMethodThunk2(TTargetPtr target, TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2)
        : Target(target), Method(method), Arg1(arg1), Arg2(arg2)
    { }

    virtual TResult Do()
    {
        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);
        return (target->*Method)(Arg1, Arg2);
    }
};

template <class TResult, class TTargetPtr, class TUnderlying, class TArg1, class TArg2>
typename IFunc<TResult>::TPtr FromMethod(
    TResult (TUnderlying::* method)(TArg1, TArg2),
    TTargetPtr target,
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2)
{
    return new TFuncMethodThunk2<TResult,TTargetPtr,TArg1,TArg2>(target, method, arg1, arg2);
}

template <class TArg1, class TArg2>
class TActionProcThunk2
    : public IAction
{
private:
    typedef void (* TMethod)(TArg1, TArg2);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;

    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;

public:
    TActionProcThunk2(TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2)
        : Method(method), Arg1(arg1), Arg2(arg2)
    { }

    virtual void Do()
    {
        (*Method)(Arg1, Arg2);
    }
};

template <class TArg1, class TArg2>
IAction::TPtr FromMethod(
    void (* method)(TArg1, TArg2),
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2)
{
    return new TActionProcThunk2<TArg1,TArg2>(method, arg1, arg2);
}

template <class TParam, class TArg1, class TArg2>
class TParamActionProcThunk2
    : public IParamAction<TParam>
{
private:
    typedef void (* TMethod)(TParam, TArg1, TArg2);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;

    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;

public:
    TParamActionProcThunk2(TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2)
        : Method(method), Arg1(arg1), Arg2(arg2)
    { }

    virtual void Do(TParam param)
    {
        (*Method)(param, Arg1, Arg2);
    }
};

template <class TParam, class TArg1, class TArg2>
typename IParamAction<TParam>::TPtr FromMethod(
    void (* method)(TParam, TArg1, TArg2),
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2)
{
    return new TParamActionProcThunk2<TParam,TArg1,TArg2>(method, arg1, arg2);
}

template <class TResult, class TArg1, class TArg2>
class TFuncProcThunk2
    : public IFunc<TResult>
{
private:
    typedef TResult (* TMethod)(TArg1, TArg2);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;

    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;

public:
    TFuncProcThunk2(TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2)
        : Method(method), Arg1(arg1), Arg2(arg2)
    { }

    virtual TResult Do()
    {
        return (*Method)(Arg1, Arg2);
    }
};

template <class TResult, class TArg1, class TArg2>
typename IFunc<TResult>::TPtr FromMethod(
    TResult (* method)(TArg1, TArg2),
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2)
{
    return new TFuncProcThunk2<TResult,TArg1,TArg2>(method, arg1, arg2);
}

template <class TParam, class TResult, class TArg1, class TArg2>
class TParamFuncProcThunk2
    : public IParamFunc<TParam, TResult>
{
private:
    typedef TResult (* TMethod)(TParam, TArg1, TArg2);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;

    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;

public:
    TParamFuncProcThunk2(TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2)
        : Method(method), Arg1(arg1), Arg2(arg2)
    { }

    virtual TResult Do(TParam param)
    {
        return (*Method)(param, Arg1, Arg2);
    }
};

template <class TParam, class TResult, class TArg1, class TArg2>
typename IParamFunc<TParam, TResult>::TPtr FromMethod(
    TResult (* method)(TParam, TArg1, TArg2),
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2)
{
    return new TParamFuncProcThunk2<TParam,TResult,TArg1,TArg2>(method, arg1, arg2);
}

////////////////////////////////////////////////////////////////////////////////

template <class TTargetPtr, class TArg1, class TArg2, class TArg3>
class TActionMethodThunk3
    : public IAction
{
private:
    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;
    typedef void (TUnderlying::* TMethod)(TArg1, TArg2, TArg3);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;
    typedef typename TActionArgTraits<TArg3>::TCopy TArgCopy3;

    TTargetPtr Target;
    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;
    TArgCopy3 Arg3;

public:
    TActionMethodThunk3(TTargetPtr target, TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2, const TArgCopy3& arg3)
        : Target(target), Method(method), Arg1(arg1), Arg2(arg2), Arg3(arg3)
    { }

    virtual void Do()
    {
        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);
        (target->*Method)(Arg1, Arg2, Arg3);
    }
};

template <class TTargetPtr, class TUnderlying, class TArg1, class TArg2, class TArg3>
IAction::TPtr FromMethod(
    void (TUnderlying::* method)(TArg1, TArg2, TArg3),
    TTargetPtr target,
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2, const typename TActionArgTraits<TArg3>::TCopy& arg3)
{
    return new TActionMethodThunk3<TTargetPtr,TArg1,TArg2,TArg3>(target, method, arg1, arg2, arg3);
}

template <class TParam, class TTargetPtr, class TArg1, class TArg2, class TArg3>
class TParamActionMethodThunk3
    : public IParamAction<TParam>
{
private:
    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;
    typedef void (TUnderlying::* TMethod)(TParam, TArg1, TArg2, TArg3);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;
    typedef typename TActionArgTraits<TArg3>::TCopy TArgCopy3;

    TTargetPtr Target;
    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;
    TArgCopy3 Arg3;

public:
    TParamActionMethodThunk3(TTargetPtr target, TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2, const TArgCopy3& arg3)
        : Target(target), Method(method), Arg1(arg1), Arg2(arg2), Arg3(arg3)
    { }

    virtual void Do(TParam param)
    {
        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);
        (target->*Method)(param, Arg1, Arg2, Arg3);
    }
};

template <class TParam, class TTargetPtr, class TUnderlying, class TArg1, class TArg2, class TArg3>
typename IParamAction<TParam>::TPtr FromMethod(
    void (TUnderlying::* method)(TParam, TArg1, TArg2, TArg3),
    TTargetPtr target,
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2, const typename TActionArgTraits<TArg3>::TCopy& arg3)
{
    return new TParamActionMethodThunk3<TParam,TTargetPtr,TArg1,TArg2,TArg3>(target, method, arg1, arg2, arg3);
}

template <class TParam, class TResult, class TTargetPtr, class TArg1, class TArg2, class TArg3>
class TParamFuncMethodThunk3
    : public IParamFunc<TParam, TResult>
{
private:
    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;
    typedef TResult (TUnderlying::* TMethod)(TParam, TArg1, TArg2, TArg3);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;
    typedef typename TActionArgTraits<TArg3>::TCopy TArgCopy3;

    TTargetPtr Target;
    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;
    TArgCopy3 Arg3;

public:
    TParamFuncMethodThunk3(TTargetPtr target, TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2, const TArgCopy3& arg3)
        : Target(target), Method(method), Arg1(arg1), Arg2(arg2), Arg3(arg3)
    { }

    virtual TResult Do(TParam param)
    {
        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);
        return (target->*Method)(param, Arg1, Arg2, Arg3);
    }
};

template <class TParam, class TResult, class TTargetPtr, class TUnderlying, class TArg1, class TArg2, class TArg3>
typename IParamFunc<TParam, TResult>::TPtr FromMethod(
    TResult (TUnderlying::* method)(TParam, TArg1, TArg2, TArg3),
    TTargetPtr target,
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2, const typename TActionArgTraits<TArg3>::TCopy& arg3)
{
    return new TParamFuncMethodThunk3<TParam,TResult,TTargetPtr,TArg1,TArg2,TArg3>(target, method, arg1, arg2, arg3);
}

template <class TResult, class TTargetPtr, class TArg1, class TArg2, class TArg3>
class TFuncMethodThunk3
    : public IFunc<TResult>
{
private:
    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;
    typedef TResult (TUnderlying::* TMethod)(TArg1, TArg2, TArg3);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;
    typedef typename TActionArgTraits<TArg3>::TCopy TArgCopy3;

    TTargetPtr Target;
    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;
    TArgCopy3 Arg3;

public:
    TFuncMethodThunk3(TTargetPtr target, TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2, const TArgCopy3& arg3)
        : Target(target), Method(method), Arg1(arg1), Arg2(arg2), Arg3(arg3)
    { }

    virtual TResult Do()
    {
        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);
        return (target->*Method)(Arg1, Arg2, Arg3);
    }
};

template <class TResult, class TTargetPtr, class TUnderlying, class TArg1, class TArg2, class TArg3>
typename IFunc<TResult>::TPtr FromMethod(
    TResult (TUnderlying::* method)(TArg1, TArg2, TArg3),
    TTargetPtr target,
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2, const typename TActionArgTraits<TArg3>::TCopy& arg3)
{
    return new TFuncMethodThunk3<TResult,TTargetPtr,TArg1,TArg2,TArg3>(target, method, arg1, arg2, arg3);
}

template <class TArg1, class TArg2, class TArg3>
class TActionProcThunk3
    : public IAction
{
private:
    typedef void (* TMethod)(TArg1, TArg2, TArg3);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;
    typedef typename TActionArgTraits<TArg3>::TCopy TArgCopy3;

    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;
    TArgCopy3 Arg3;

public:
    TActionProcThunk3(TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2, const TArgCopy3& arg3)
        : Method(method), Arg1(arg1), Arg2(arg2), Arg3(arg3)
    { }

    virtual void Do()
    {
        (*Method)(Arg1, Arg2, Arg3);
    }
};

template <class TArg1, class TArg2, class TArg3>
IAction::TPtr FromMethod(
    void (* method)(TArg1, TArg2, TArg3),
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2, const typename TActionArgTraits<TArg3>::TCopy& arg3)
{
    return new TActionProcThunk3<TArg1,TArg2,TArg3>(method, arg1, arg2, arg3);
}

template <class TParam, class TArg1, class TArg2, class TArg3>
class TParamActionProcThunk3
    : public IParamAction<TParam>
{
private:
    typedef void (* TMethod)(TParam, TArg1, TArg2, TArg3);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;
    typedef typename TActionArgTraits<TArg3>::TCopy TArgCopy3;

    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;
    TArgCopy3 Arg3;

public:
    TParamActionProcThunk3(TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2, const TArgCopy3& arg3)
        : Method(method), Arg1(arg1), Arg2(arg2), Arg3(arg3)
    { }

    virtual void Do(TParam param)
    {
        (*Method)(param, Arg1, Arg2, Arg3);
    }
};

template <class TParam, class TArg1, class TArg2, class TArg3>
typename IParamAction<TParam>::TPtr FromMethod(
    void (* method)(TParam, TArg1, TArg2, TArg3),
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2, const typename TActionArgTraits<TArg3>::TCopy& arg3)
{
    return new TParamActionProcThunk3<TParam,TArg1,TArg2,TArg3>(method, arg1, arg2, arg3);
}

template <class TResult, class TArg1, class TArg2, class TArg3>
class TFuncProcThunk3
    : public IFunc<TResult>
{
private:
    typedef TResult (* TMethod)(TArg1, TArg2, TArg3);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;
    typedef typename TActionArgTraits<TArg3>::TCopy TArgCopy3;

    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;
    TArgCopy3 Arg3;

public:
    TFuncProcThunk3(TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2, const TArgCopy3& arg3)
        : Method(method), Arg1(arg1), Arg2(arg2), Arg3(arg3)
    { }

    virtual TResult Do()
    {
        return (*Method)(Arg1, Arg2, Arg3);
    }
};

template <class TResult, class TArg1, class TArg2, class TArg3>
typename IFunc<TResult>::TPtr FromMethod(
    TResult (* method)(TArg1, TArg2, TArg3),
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2, const typename TActionArgTraits<TArg3>::TCopy& arg3)
{
    return new TFuncProcThunk3<TResult,TArg1,TArg2,TArg3>(method, arg1, arg2, arg3);
}

template <class TParam, class TResult, class TArg1, class TArg2, class TArg3>
class TParamFuncProcThunk3
    : public IParamFunc<TParam, TResult>
{
private:
    typedef TResult (* TMethod)(TParam, TArg1, TArg2, TArg3);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;
    typedef typename TActionArgTraits<TArg3>::TCopy TArgCopy3;

    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;
    TArgCopy3 Arg3;

public:
    TParamFuncProcThunk3(TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2, const TArgCopy3& arg3)
        : Method(method), Arg1(arg1), Arg2(arg2), Arg3(arg3)
    { }

    virtual TResult Do(TParam param)
    {
        return (*Method)(param, Arg1, Arg2, Arg3);
    }
};

template <class TParam, class TResult, class TArg1, class TArg2, class TArg3>
typename IParamFunc<TParam, TResult>::TPtr FromMethod(
    TResult (* method)(TParam, TArg1, TArg2, TArg3),
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2, const typename TActionArgTraits<TArg3>::TCopy& arg3)
{
    return new TParamFuncProcThunk3<TParam,TResult,TArg1,TArg2,TArg3>(method, arg1, arg2, arg3);
}

////////////////////////////////////////////////////////////////////////////////

template <class TTargetPtr, class TArg1, class TArg2, class TArg3, class TArg4>
class TActionMethodThunk4
    : public IAction
{
private:
    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;
    typedef void (TUnderlying::* TMethod)(TArg1, TArg2, TArg3, TArg4);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;
    typedef typename TActionArgTraits<TArg3>::TCopy TArgCopy3;
    typedef typename TActionArgTraits<TArg4>::TCopy TArgCopy4;

    TTargetPtr Target;
    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;
    TArgCopy3 Arg3;
    TArgCopy4 Arg4;

public:
    TActionMethodThunk4(TTargetPtr target, TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2, const TArgCopy3& arg3, const TArgCopy4& arg4)
        : Target(target), Method(method), Arg1(arg1), Arg2(arg2), Arg3(arg3), Arg4(arg4)
    { }

    virtual void Do()
    {
        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);
        (target->*Method)(Arg1, Arg2, Arg3, Arg4);
    }
};

template <class TTargetPtr, class TUnderlying, class TArg1, class TArg2, class TArg3, class TArg4>
IAction::TPtr FromMethod(
    void (TUnderlying::* method)(TArg1, TArg2, TArg3, TArg4),
    TTargetPtr target,
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2, const typename TActionArgTraits<TArg3>::TCopy& arg3, const typename TActionArgTraits<TArg4>::TCopy& arg4)
{
    return new TActionMethodThunk4<TTargetPtr,TArg1,TArg2,TArg3,TArg4>(target, method, arg1, arg2, arg3, arg4);
}

template <class TParam, class TTargetPtr, class TArg1, class TArg2, class TArg3, class TArg4>
class TParamActionMethodThunk4
    : public IParamAction<TParam>
{
private:
    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;
    typedef void (TUnderlying::* TMethod)(TParam, TArg1, TArg2, TArg3, TArg4);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;
    typedef typename TActionArgTraits<TArg3>::TCopy TArgCopy3;
    typedef typename TActionArgTraits<TArg4>::TCopy TArgCopy4;

    TTargetPtr Target;
    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;
    TArgCopy3 Arg3;
    TArgCopy4 Arg4;

public:
    TParamActionMethodThunk4(TTargetPtr target, TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2, const TArgCopy3& arg3, const TArgCopy4& arg4)
        : Target(target), Method(method), Arg1(arg1), Arg2(arg2), Arg3(arg3), Arg4(arg4)
    { }

    virtual void Do(TParam param)
    {
        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);
        (target->*Method)(param, Arg1, Arg2, Arg3, Arg4);
    }
};

template <class TParam, class TTargetPtr, class TUnderlying, class TArg1, class TArg2, class TArg3, class TArg4>
typename IParamAction<TParam>::TPtr FromMethod(
    void (TUnderlying::* method)(TParam, TArg1, TArg2, TArg3, TArg4),
    TTargetPtr target,
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2, const typename TActionArgTraits<TArg3>::TCopy& arg3, const typename TActionArgTraits<TArg4>::TCopy& arg4)
{
    return new TParamActionMethodThunk4<TParam,TTargetPtr,TArg1,TArg2,TArg3,TArg4>(target, method, arg1, arg2, arg3, arg4);
}

template <class TParam, class TResult, class TTargetPtr, class TArg1, class TArg2, class TArg3, class TArg4>
class TParamFuncMethodThunk4
    : public IParamFunc<TParam, TResult>
{
private:
    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;
    typedef TResult (TUnderlying::* TMethod)(TParam, TArg1, TArg2, TArg3, TArg4);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;
    typedef typename TActionArgTraits<TArg3>::TCopy TArgCopy3;
    typedef typename TActionArgTraits<TArg4>::TCopy TArgCopy4;

    TTargetPtr Target;
    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;
    TArgCopy3 Arg3;
    TArgCopy4 Arg4;

public:
    TParamFuncMethodThunk4(TTargetPtr target, TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2, const TArgCopy3& arg3, const TArgCopy4& arg4)
        : Target(target), Method(method), Arg1(arg1), Arg2(arg2), Arg3(arg3), Arg4(arg4)
    { }

    virtual TResult Do(TParam param)
    {
        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);
        return (target->*Method)(param, Arg1, Arg2, Arg3, Arg4);
    }
};

template <class TParam, class TResult, class TTargetPtr, class TUnderlying, class TArg1, class TArg2, class TArg3, class TArg4>
typename IParamFunc<TParam, TResult>::TPtr FromMethod(
    TResult (TUnderlying::* method)(TParam, TArg1, TArg2, TArg3, TArg4),
    TTargetPtr target,
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2, const typename TActionArgTraits<TArg3>::TCopy& arg3, const typename TActionArgTraits<TArg4>::TCopy& arg4)
{
    return new TParamFuncMethodThunk4<TParam,TResult,TTargetPtr,TArg1,TArg2,TArg3,TArg4>(target, method, arg1, arg2, arg3, arg4);
}

template <class TResult, class TTargetPtr, class TArg1, class TArg2, class TArg3, class TArg4>
class TFuncMethodThunk4
    : public IFunc<TResult>
{
private:
    typedef typename TActionTargetTraits<TTargetPtr>::TUnderlying TUnderlying;
    typedef TResult (TUnderlying::* TMethod)(TArg1, TArg2, TArg3, TArg4);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;
    typedef typename TActionArgTraits<TArg3>::TCopy TArgCopy3;
    typedef typename TActionArgTraits<TArg4>::TCopy TArgCopy4;

    TTargetPtr Target;
    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;
    TArgCopy3 Arg3;
    TArgCopy4 Arg4;

public:
    TFuncMethodThunk4(TTargetPtr target, TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2, const TArgCopy3& arg3, const TArgCopy4& arg4)
        : Target(target), Method(method), Arg1(arg1), Arg2(arg2), Arg3(arg3), Arg4(arg4)
    { }

    virtual TResult Do()
    {
        TUnderlying* target = TActionTargetTraits<TTargetPtr>::Get(Target);
        return (target->*Method)(Arg1, Arg2, Arg3, Arg4);
    }
};

template <class TResult, class TTargetPtr, class TUnderlying, class TArg1, class TArg2, class TArg3, class TArg4>
typename IFunc<TResult>::TPtr FromMethod(
    TResult (TUnderlying::* method)(TArg1, TArg2, TArg3, TArg4),
    TTargetPtr target,
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2, const typename TActionArgTraits<TArg3>::TCopy& arg3, const typename TActionArgTraits<TArg4>::TCopy& arg4)
{
    return new TFuncMethodThunk4<TResult,TTargetPtr,TArg1,TArg2,TArg3,TArg4>(target, method, arg1, arg2, arg3, arg4);
}

template <class TArg1, class TArg2, class TArg3, class TArg4>
class TActionProcThunk4
    : public IAction
{
private:
    typedef void (* TMethod)(TArg1, TArg2, TArg3, TArg4);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;
    typedef typename TActionArgTraits<TArg3>::TCopy TArgCopy3;
    typedef typename TActionArgTraits<TArg4>::TCopy TArgCopy4;

    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;
    TArgCopy3 Arg3;
    TArgCopy4 Arg4;

public:
    TActionProcThunk4(TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2, const TArgCopy3& arg3, const TArgCopy4& arg4)
        : Method(method), Arg1(arg1), Arg2(arg2), Arg3(arg3), Arg4(arg4)
    { }

    virtual void Do()
    {
        (*Method)(Arg1, Arg2, Arg3, Arg4);
    }
};

template <class TArg1, class TArg2, class TArg3, class TArg4>
IAction::TPtr FromMethod(
    void (* method)(TArg1, TArg2, TArg3, TArg4),
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2, const typename TActionArgTraits<TArg3>::TCopy& arg3, const typename TActionArgTraits<TArg4>::TCopy& arg4)
{
    return new TActionProcThunk4<TArg1,TArg2,TArg3,TArg4>(method, arg1, arg2, arg3, arg4);
}

template <class TParam, class TArg1, class TArg2, class TArg3, class TArg4>
class TParamActionProcThunk4
    : public IParamAction<TParam>
{
private:
    typedef void (* TMethod)(TParam, TArg1, TArg2, TArg3, TArg4);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;
    typedef typename TActionArgTraits<TArg3>::TCopy TArgCopy3;
    typedef typename TActionArgTraits<TArg4>::TCopy TArgCopy4;

    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;
    TArgCopy3 Arg3;
    TArgCopy4 Arg4;

public:
    TParamActionProcThunk4(TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2, const TArgCopy3& arg3, const TArgCopy4& arg4)
        : Method(method), Arg1(arg1), Arg2(arg2), Arg3(arg3), Arg4(arg4)
    { }

    virtual void Do(TParam param)
    {
        (*Method)(param, Arg1, Arg2, Arg3, Arg4);
    }
};

template <class TParam, class TArg1, class TArg2, class TArg3, class TArg4>
typename IParamAction<TParam>::TPtr FromMethod(
    void (* method)(TParam, TArg1, TArg2, TArg3, TArg4),
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2, const typename TActionArgTraits<TArg3>::TCopy& arg3, const typename TActionArgTraits<TArg4>::TCopy& arg4)
{
    return new TParamActionProcThunk4<TParam,TArg1,TArg2,TArg3,TArg4>(method, arg1, arg2, arg3, arg4);
}

template <class TResult, class TArg1, class TArg2, class TArg3, class TArg4>
class TFuncProcThunk4
    : public IFunc<TResult>
{
private:
    typedef TResult (* TMethod)(TArg1, TArg2, TArg3, TArg4);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;
    typedef typename TActionArgTraits<TArg3>::TCopy TArgCopy3;
    typedef typename TActionArgTraits<TArg4>::TCopy TArgCopy4;

    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;
    TArgCopy3 Arg3;
    TArgCopy4 Arg4;

public:
    TFuncProcThunk4(TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2, const TArgCopy3& arg3, const TArgCopy4& arg4)
        : Method(method), Arg1(arg1), Arg2(arg2), Arg3(arg3), Arg4(arg4)
    { }

    virtual TResult Do()
    {
        return (*Method)(Arg1, Arg2, Arg3, Arg4);
    }
};

template <class TResult, class TArg1, class TArg2, class TArg3, class TArg4>
typename IFunc<TResult>::TPtr FromMethod(
    TResult (* method)(TArg1, TArg2, TArg3, TArg4),
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2, const typename TActionArgTraits<TArg3>::TCopy& arg3, const typename TActionArgTraits<TArg4>::TCopy& arg4)
{
    return new TFuncProcThunk4<TResult,TArg1,TArg2,TArg3,TArg4>(method, arg1, arg2, arg3, arg4);
}

template <class TParam, class TResult, class TArg1, class TArg2, class TArg3, class TArg4>
class TParamFuncProcThunk4
    : public IParamFunc<TParam, TResult>
{
private:
    typedef TResult (* TMethod)(TParam, TArg1, TArg2, TArg3, TArg4);
    typedef typename TActionArgTraits<TArg1>::TCopy TArgCopy1;
    typedef typename TActionArgTraits<TArg2>::TCopy TArgCopy2;
    typedef typename TActionArgTraits<TArg3>::TCopy TArgCopy3;
    typedef typename TActionArgTraits<TArg4>::TCopy TArgCopy4;

    TMethod Method;
    TArgCopy1 Arg1;
    TArgCopy2 Arg2;
    TArgCopy3 Arg3;
    TArgCopy4 Arg4;

public:
    TParamFuncProcThunk4(TMethod method, const TArgCopy1& arg1, const TArgCopy2& arg2, const TArgCopy3& arg3, const TArgCopy4& arg4)
        : Method(method), Arg1(arg1), Arg2(arg2), Arg3(arg3), Arg4(arg4)
    { }

    virtual TResult Do(TParam param)
    {
        return (*Method)(param, Arg1, Arg2, Arg3, Arg4);
    }
};

template <class TParam, class TResult, class TArg1, class TArg2, class TArg3, class TArg4>
typename IParamFunc<TParam, TResult>::TPtr FromMethod(
    TResult (* method)(TParam, TArg1, TArg2, TArg3, TArg4),
    const typename TActionArgTraits<TArg1>::TCopy& arg1, const typename TActionArgTraits<TArg2>::TCopy& arg2, const typename TActionArgTraits<TArg3>::TCopy& arg3, const typename TActionArgTraits<TArg4>::TCopy& arg4)
{
    return new TParamFuncProcThunk4<TParam,TResult,TArg1,TArg2,TArg3,TArg4>(method, arg1, arg2, arg3, arg4);
}

////////////////////////////////////////////////////////////////////////////////

} // namespace NYT
