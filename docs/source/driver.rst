Хороший консольный клиент YT
============================

Опыт показывает, что проще и интуитивней всего -- это быть похожими на Linux и его утилиты, не даром в поиске так популярны mr_apps.

Команды для работы с файловой системой
--------------------------------------

* `yt raw {direct_command}` выполняет команду к драйверу напрямую.
* `ls {path} [-l]` перечисляет объекты в директории (при указанной опции `-a` также печатает размеры объектов и права).
* `find {path} --name {pattern} [--type {table|file|all}]` ищет объекты в данном каталоге по данному паттерну (можно поддержать произвольный regexp, но лучше сделать также, как в линуксовой утилите). !!Решили, что пока не нужна!!
* `cat {path} [--format {format}]` читает заданную таблицу или файл (если объект является таблицей, то параметр `format` обязателен).
* `rm {path} [-r]` удаляет объект по указанному пути. Если указано опция `-r`, то удаляет каталог рекурсивно.
* `mkdir {path} [-p]` создает по пути `{path}` директорию. Путь не должен существовать, однако его `basename` должен быть существуещей директорией. Если указана опция `-p`, то позволяет создавать сразу несколько вложенных директорий.
* `cp {from} {to}` копирует узел по адресу {from} в узел по адресу {to}.
* `mv {from} {to}` перемещает узел по адресу {from} в узел по адресу {to}.
* `touch {path}` создает пустую таблицу по пути `path` !!ambigious: из названия непонятно это пустой файл, или пустая таблицы!!.
* `upload {path} --type file|table [--format {format}] [--executable] [--filename {filename}]` записывает данные из входного потока в файл или таблицу по пути `path`, для таблицы обязательна опция `format`, опции `--executable` и `--filename` работают только для файлов. !!или не стоит смешивать заливку таблиц и файлов?!!
* `download {path} [--format {format}]` --читает данные из таблицы, или файла, для таблицы обязательна опция `format`.-- !!Тоже самое, что cat!!
* `erase {table}`

Команды запуска операций
------------------------

* `sort --keys {keys} --src {table} --dst {table}`
* `merge --mode {mode} --src {table} [...] --dst {table} [...]`
* `map|reduce {command} --format {format} --src {table} [...] --dst {table} [...] [--file {file} ...] [--local-file {file} ...] [--keys {keys}]`
* `map_reduce ...`
* `abort {op_id}`

Append mode предлагается сделать частью имени таблицы выставлять одним из следующих образов:

* `<append=true>//home/my_table`
* `+//home/my_table`

По умолчанию он выключен, так как его отсутствие встречается гораздо чаще, чем наличие.

`file` -- означает файлы уже залитые в систему, `local-file` означает файлы из того места где запускается команда, они будут временно залиты в систему и удалены по окончании операции.

Команды для работы с транзакциями
---------------------------------

У всех команд (в частности перечисленных выше, будут опции `--tx` и `--ping-ancestor-transactions`.

* `start_tx` начинает транзакцию и возвращает её ID.
* `commit_tx {tx}`
* `abort_tx {tx}`
* `ping_tx {tx}`

TODO
====

1. Переделать Driver:
  * `mkdir` реализуется через `create map_node`, нужна опция recursive.
  * `rm [-r]` надо добавть соотвествующие опции для команды `remove`
  * по-умолчанию `overwrite=true`, также можно переименовать в append.
  * Научить команду list возвращать знания об объектах
2. Данный утилиту можно реализовать на основе python wrapper-а без переделок в драйвере и вкручивать их постепенно.
  * Для этого надо аккуратно выпилить логику про дефолтный Yamr из wrapper-a.